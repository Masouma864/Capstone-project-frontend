{"ast":null,"code":"/* eslint-disable */\nimport { publicRequest } from \"../request\";\nimport { loginFailure, loginStart, loginSuccess } from \"./user/user\";\nimport { vehicleFailure, vehicleStart, vehicleSuccess } from \"./vehicles/vehicle\";\nexport const login = async (dispatch, user) => {\n  dispatch(loginStart());\n  try {\n    const res = await publicRequest.post(\"/login\", user);\n    const responseData = res.data;\n    delete responseData.headers;\n    dispatch(loginSuccess(responseData));\n  } catch (err) {\n    dispatch(loginFailure());\n  }\n};\nexport const logout = dispatch => {\n  dispatch(loginSuccess(false));\n};\nexport const createUser = async (dispatch, user) => {\n  dispatch(loginStart());\n  try {\n    const res = await publicRequest.post(\"/register\", user);\n    const responseData = res.data;\n    delete responseData.headers;\n    dispatch(loginSuccess(responseData));\n  } catch (err) {\n    dispatch(loginFailure());\n  }\n};\n\n// export const getVehicleId = async (dispatch, vehicle) => {\n//   dispatch(vehicleStart());\n//   try {\n//     const res = await publicRequest.post(`/motorcycles/:id`, vehicle)\n//     const responseData = res.data;\n//     delete responseData.headers;\n//     dispatch(vehicleSuccess(responseData))\n//   } catch (err) {\n//     dispatch(vehicleFailure())\n//   }\n// }","map":{"version":3,"names":["publicRequest","loginFailure","loginStart","loginSuccess","vehicleFailure","vehicleStart","vehicleSuccess","login","dispatch","user","res","post","responseData","data","headers","err","logout","createUser"],"sources":["/Users/neliswakhanyile/Desktop/user_interface/src/redux/apiCalls.js"],"sourcesContent":["/* eslint-disable */\r\nimport { publicRequest } from \"../request\";\r\nimport { loginFailure, loginStart, loginSuccess } from \"./user/user\"\r\nimport { vehicleFailure, vehicleStart, vehicleSuccess } from \"./vehicles/vehicle\";\r\n\r\nexport const login = async (dispatch, user) => {\r\n  dispatch(loginStart());\r\n  try {\r\n    const res = await publicRequest.post(\"/login\", user)\r\n    const responseData = res.data;\r\n    delete responseData.headers;\r\n    dispatch(loginSuccess(responseData))\r\n  } catch (err) {\r\n    dispatch(loginFailure())\r\n  }\r\n}\r\nexport const logout = (dispatch) => {\r\n  dispatch(loginSuccess(false))\r\n}\r\n\r\nexport const createUser = async (dispatch, user) => {\r\n  dispatch(loginStart());\r\n  try {\r\n    const res = await publicRequest.post(\"/register\", user)\r\n    const responseData = res.data;\r\n    delete responseData.headers;\r\n    dispatch(loginSuccess(responseData))\r\n  } catch (err) {\r\n    dispatch(loginFailure())\r\n  }\r\n}\r\n\r\n// export const getVehicleId = async (dispatch, vehicle) => {\r\n//   dispatch(vehicleStart());\r\n//   try {\r\n//     const res = await publicRequest.post(`/motorcycles/:id`, vehicle)\r\n//     const responseData = res.data;\r\n//     delete responseData.headers;\r\n//     dispatch(vehicleSuccess(responseData))\r\n//   } catch (err) {\r\n//     dispatch(vehicleFailure())\r\n//   }\r\n// }"],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,YAAY;AAC1C,SAASC,YAAY,EAAEC,UAAU,EAAEC,YAAY,QAAQ,aAAa;AACpE,SAASC,cAAc,EAAEC,YAAY,EAAEC,cAAc,QAAQ,oBAAoB;AAEjF,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,IAAI,KAAK;EAC7CD,QAAQ,CAACN,UAAU,EAAE,CAAC;EACtB,IAAI;IACF,MAAMQ,GAAG,GAAG,MAAMV,aAAa,CAACW,IAAI,CAAC,QAAQ,EAAEF,IAAI,CAAC;IACpD,MAAMG,YAAY,GAAGF,GAAG,CAACG,IAAI;IAC7B,OAAOD,YAAY,CAACE,OAAO;IAC3BN,QAAQ,CAACL,YAAY,CAACS,YAAY,CAAC,CAAC;EACtC,CAAC,CAAC,OAAOG,GAAG,EAAE;IACZP,QAAQ,CAACP,YAAY,EAAE,CAAC;EAC1B;AACF,CAAC;AACD,OAAO,MAAMe,MAAM,GAAIR,QAAQ,IAAK;EAClCA,QAAQ,CAACL,YAAY,CAAC,KAAK,CAAC,CAAC;AAC/B,CAAC;AAED,OAAO,MAAMc,UAAU,GAAG,MAAAA,CAAOT,QAAQ,EAAEC,IAAI,KAAK;EAClDD,QAAQ,CAACN,UAAU,EAAE,CAAC;EACtB,IAAI;IACF,MAAMQ,GAAG,GAAG,MAAMV,aAAa,CAACW,IAAI,CAAC,WAAW,EAAEF,IAAI,CAAC;IACvD,MAAMG,YAAY,GAAGF,GAAG,CAACG,IAAI;IAC7B,OAAOD,YAAY,CAACE,OAAO;IAC3BN,QAAQ,CAACL,YAAY,CAACS,YAAY,CAAC,CAAC;EACtC,CAAC,CAAC,OAAOG,GAAG,EAAE;IACZP,QAAQ,CAACP,YAAY,EAAE,CAAC;EAC1B;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}